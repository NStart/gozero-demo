// Code generated by goctl. DO NOT EDIT.

package mysql_nocache

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	osOrgInfoFieldNames          = builder.RawFieldNames(&OsOrgInfo{})
	osOrgInfoRows                = strings.Join(osOrgInfoFieldNames, ",")
	osOrgInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(osOrgInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	osOrgInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(osOrgInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	osOrgInfoModel interface {
		Insert(ctx context.Context, data *OsOrgInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OsOrgInfo, error)
		Update(ctx context.Context, data *OsOrgInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOsOrgInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OsOrgInfo struct {
		Id                  int64          `db:"id"`
		Org                 string         `db:"org"`                  // 企业名称
		IsDeal              int64          `db:"is_deal"`              // 是否分析过，0未分析，1已分析
		IsDelete            int64          `db:"is_delete"`            // 是否删除，0未删除，1已删除
		RegStatus           sql.NullString `db:"reg_status"`           // 登记状态
		LegalRepresentative sql.NullString `db:"legal_representative"` // 法定代表人
		RegCapital          sql.NullString `db:"reg_capital"`          // 注册资本
		RegTime             sql.NullTime   `db:"reg_time"`             // 成立时间
		ApprovalTime        sql.NullTime   `db:"approval_time"`        // 核准时间
		Province            string         `db:"province"`             // 所属省份
		City                string         `db:"city"`                 // 所属城市
		County              string         `db:"county"`               // 县、区
		Phone               sql.NullString `db:"phone"`                // 电话
		MorePhone           sql.NullString `db:"more_phone"`           // 更多电话
		Email               sql.NullString `db:"email"`                // 邮箱
		MoreEmail           sql.NullString `db:"more_email"`           // 更多邮箱
		Uscc                sql.NullString `db:"uscc"`                 // 统一社会信用代码
		Tin                 sql.NullString `db:"tin"`                  // 纳税人识别号
		RegNum              sql.NullString `db:"reg_num"`              // 注册号
		OrgCode             sql.NullString `db:"org_code"`             // 组织机构代码
		ParticipantsNum     sql.NullInt64  `db:"participants_num"`     // 参保人数
		OrgType             sql.NullString `db:"org_type"`             // 企业类型
		Industry            string         `db:"industry"`             // 所属行业
		FormerName          sql.NullString `db:"former_name"`          // 曾用名
		EnName              sql.NullString `db:"en_name"`              // 英文名
		Url                 sql.NullString `db:"url"`                  // 网址
		Domain              sql.NullString `db:"domain"`               // 域名
		Address             sql.NullString `db:"address"`              // 地址
		LatestAddress       sql.NullString `db:"latest_address"`       // 最新年报地址
		BusinessScope       string         `db:"business_scope"`       // 经营范围
		AddTime             sql.NullTime   `db:"add_time"`
		UpdateTime          sql.NullTime   `db:"update_time"`
		IsAccessible        int64          `db:"is_accessible"`
		IsInstalled         int64          `db:"is_installed"` // 是否安装ssl，1已安装，0未安装
		Subjectcountry      sql.NullString `db:"subjectcountry"`
		Subjectprovince     sql.NullString `db:"subjectprovince"`
		Subjectlocality     sql.NullString `db:"subjectlocality"`
		Subjectorg          sql.NullString `db:"subjectorg"`
		Subjectunit         sql.NullString `db:"subjectunit"`
		Issuerca            string         `db:"issuerca"` // 证书签发机构
		Notbefore           sql.NullTime   `db:"notbefore"`
		Notafter            sql.NullTime   `db:"notafter"`
		Dnsnames            sql.NullString `db:"dnsnames"`
	}
)

func newOsOrgInfoModel(conn sqlx.SqlConn) *defaultOsOrgInfoModel {
	return &defaultOsOrgInfoModel{
		conn:  conn,
		table: "`os_org_info`",
	}
}

func (m *defaultOsOrgInfoModel) withSession(session sqlx.Session) *defaultOsOrgInfoModel {
	return &defaultOsOrgInfoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`os_org_info`",
	}
}

func (m *defaultOsOrgInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOsOrgInfoModel) FindOne(ctx context.Context, id int64) (*OsOrgInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", osOrgInfoRows, m.table)
	var resp OsOrgInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOsOrgInfoModel) Insert(ctx context.Context, data *OsOrgInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, osOrgInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Org, data.IsDeal, data.IsDelete, data.RegStatus, data.LegalRepresentative, data.RegCapital, data.RegTime, data.ApprovalTime, data.Province, data.City, data.County, data.Phone, data.MorePhone, data.Email, data.MoreEmail, data.Uscc, data.Tin, data.RegNum, data.OrgCode, data.ParticipantsNum, data.OrgType, data.Industry, data.FormerName, data.EnName, data.Url, data.Domain, data.Address, data.LatestAddress, data.BusinessScope, data.AddTime, data.IsAccessible, data.IsInstalled, data.Subjectcountry, data.Subjectprovince, data.Subjectlocality, data.Subjectorg, data.Subjectunit, data.Issuerca, data.Notbefore, data.Notafter, data.Dnsnames)
	return ret, err
}

func (m *defaultOsOrgInfoModel) Update(ctx context.Context, data *OsOrgInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, osOrgInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Org, data.IsDeal, data.IsDelete, data.RegStatus, data.LegalRepresentative, data.RegCapital, data.RegTime, data.ApprovalTime, data.Province, data.City, data.County, data.Phone, data.MorePhone, data.Email, data.MoreEmail, data.Uscc, data.Tin, data.RegNum, data.OrgCode, data.ParticipantsNum, data.OrgType, data.Industry, data.FormerName, data.EnName, data.Url, data.Domain, data.Address, data.LatestAddress, data.BusinessScope, data.AddTime, data.IsAccessible, data.IsInstalled, data.Subjectcountry, data.Subjectprovince, data.Subjectlocality, data.Subjectorg, data.Subjectunit, data.Issuerca, data.Notbefore, data.Notafter, data.Dnsnames, data.Id)
	return err
}

func (m *defaultOsOrgInfoModel) tableName() string {
	return m.table
}
